#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;

use FindBin;
use lib "$FindBin::RealBin/../lib";

use GAL::Annotation;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

protein_genes --clean feature.gff3 sequence.fasta

Description:

Pint the protein coding genes in a GFF3 file.

Options:

  --internal_stops, -i n

    Filter transcripts that have more than n internal stop codons.

  --no_start, -a

    Filter transcripts that do not have an AUG start codon.

  --no_stop, -o

    Filter transcripts that do not have a canonical stop codon.

  --clean, -c

    Apply all the above filters with --internal_stops = 0.

  --verbose, -v

    Report verbose details on genes that are skipped.

";

my $CL = join ' ', $0, @ARGV;
chomp $CL;

my ($help, $clean, $verbose, $internal_stops, $no_start, $no_stop);

my $opt_success = GetOptions('help|h'             => \$help,
                             'clean|c'            => \$clean,
                             'internal_stops|i=i' => \$internal_stops,
                             'no_start|a'         => \$no_start,
                             'no_stop|o'          => \$no_stop,
                             'verbose|v'          => \$verbose,
                              );

if (! $opt_success) {
    print STDERR join ' : ', ('FATAL',
                              'command_line_parse_error',
                              'Use gal_protein_genes --help to see correct usage');
}

if ($clean) {
        $internal_stops = 0;
        $no_start++;
        $no_stop++;
}

if ($help || !@ARGV) {
 print $usage;
 exit(0);
}

my ($gff3, $fasta) = @ARGV;

die $usage unless $fasta && $gff3;

my $annotation = GAL::Annotation->new($gff3,
                                      $fasta);

my $features = $annotation->features;

my $genes = $features->search({type => 'gene'});

if ($gff3 =~ /\.gff3?$/) {
        my $meta_data = `grep -P '^\#' $gff3 | grep -vP '^\#\#\#'`;
        chomp $meta_data;
        print $meta_data;
        print "\n";
}

print "# Command='$CL'\n";


GENE:
while (my $gene = $genes->next) {
        unless ($gene->is_coding) {
                $gene->warn('gene_has_no_mRNA',
                            'Skipping ' . $gene->feature_id);
                next GENE;
        }
        my $mrnas = $gene->mRNAs;
        my $gene_text = $gene->to_gff3 . "\n";
        my $gene_flag;

        if (defined $internal_stops || $no_start || $no_stop) {

              MRNA:
                while (my $mrna = $mrnas->next) {
                        my $mrna_id = $mrna->feature_id;

                        my $prot_seq = $mrna->protein_seq;
                        my $stop_count = $prot_seq =~ tr/\*/\*/;

                        my $skip;
                        # Internal Stops
                        if (defined $internal_stops && $stop_count > $internal_stops) {
                                $mrna->warn('protein_has_internal_stops',
                                            "Stops=$stop_count " . $mrna->feature_id);
                                $skip++;
                        }

                        # No Start
                        if ($no_start && $mrna->start_codon ne 'ATG') {
                                $mrna->warn('mRNA_has_no_start_codon',
                                            $mrna->feature_id);
                                $skip++;
                        }

                        # No Stop
                        if ($no_start && $mrna->stop_codon !~ /^(TAG|TGA|TAA)$/) {
                                $mrna->warn('mRNA_has_no_stop_codon',
                                            $mrna->feature_id);
                                $skip++;
                        }

                        if ($skip) {
                                if ($verbose) {
                                        print STDERR "mRNA Sequence:\n";
                                        print STDERR $mrna->CDS_seq;
                                        print STDERR "\n";
                                        print STDERR "Protein Sequence:\n";
                                        print STDERR $mrna->protein_seq;
                                        print STDERR "\n";
                                }
                                next MRNA;
                        }

                        print $gene_text unless $gene_flag++;
                        print join "\n", $mrna->to_gff3_recursive;
                        print "\n";
                }
                $gene->warn('gene_has_no_valid_protiens',
                            'Skipping ' . $gene->feature_id)
                  unless $gene_flag;
        }
        else {
                print join "\n", $gene->to_gff3_recursive;
                print "\n";
        }
}
