#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use Bio::DB::Fasta;
use Data::Dumper;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------
my $usage = "

Synopsis:

ucsc2gff --table knownGene knownGene.txt

Description:

This script will take knownGene or refGene tables from UCSC and build
GFF files from them.  The GFF file will not contain gene features
because these are not available from the UCSC GTF (but see the
--add_genes option below).  To create a valid GFF3 that contain
genes, pass the output from this program into build_genes.

Options:

  --table, t  TABLE

    Which UCSC table are you using

	    knownGene => knownGene.txt
	    refGene   => refGene.txt
	    ccdsGene  => ccdsGene.txt
	    Gencode   => wgEncodeGencodeManualV4.txt
	    vegaGene  => vegaGene
	    ensGene   => ensGene

  --pragma, p  FILE

    A file to pass that contains pragmas that will be added to the
    front of the file

  --fasta, f FILE

    A fasta file for the assembly (chromosomes/contigs).

  --clean, c

    Remove CDS features that have more than one internal stop.

  --alias, a FILE

    An external alias file that can be used to map transcript IDs to
    gene symbols (e.g. merge_data --col1 1 --col2 0 ccdsKgMap.txt
    kgXref.txt | perl -lane 'print join \"\\t\", \@F[0,10]' >
    ccds2GeneSymbol.txt)

  --add_genes

    By default this script will just generate transcripts, exons and
    CDSs because gene IDs are not always mapped accurately in the UCSC
    tables.  Another script build_genes is then used to cluster the
    transcripts and create genes for the resulting clusters.  However
    in some datasets such as Ensembl (ensGene) the transcript to gene
    mapping given in the table data is sufficient to build the genes
    directly.  This option will create gene features and parent the
    transcripts to those genes.  The genes will all be at the end of
    the file, so the file should be sorted by location after using
    this option.

";


my $command_line = join ' ', ($0, @ARGV);

my ($help, $table, $pragma_file, $fasta_file, $clean, $alias_file,
    $add_genes);

my $opt_success = GetOptions('help'      => \$help,
			     'table=s'   => \$table,
			     'pragma=s'  => \$pragma_file,
			     'fasta=s'   => \$fasta_file,
			     'clean'     => \$clean,
			     'alias|a=s' => \$alias_file,
			     'add_genes' => \$add_genes,
			     );

if (! $opt_success) {
    print STDERR join ' : ', ('FATAL',
                              'command_line_parse_error',
                              'Use ucsc2gff --help to see correct usage');
}

if ($help || !@ARGV) {
 print $usage;
 exit(0);
}

my $file = shift;
die $usage unless $file;
open (my $IN, '<', $file) or die "Can't open $file for reading\n$!\n";

die "FATAL : fasta_file_required : $fasta_file\n" unless $fasta_file;
die "FATAL : file_does_not_exist : $fasta_file\n" unless -e $fasta_file;
die "FATAL : file_not_readable : $fasta_file\n"   unless -r $fasta_file;
my $fasta = Bio::DB::Fasta->new($fasta_file);

my %ALIASES;
if ($alias_file) {
    die "FATAL : file_does_not_exist : $alias_file\n"
	unless -e $alias_file;
    die "FATAL : cant_read_file : $alias_file\n"
	unless -e $alias_file;
    open (my $IN, '<', $alias_file) or
	die "FATAL : cant_open_file_for_reading : $alias_file\n";
    while (<$IN>) {
	chomp;
	next if ($_ =~ /^\#/ || ! $_);	
	my ($id, $alias) = split /\t/, $_;
	$ALIASES{$id}{$alias}++;
    }
}

if ($pragma_file) {
    open(my $PG, '<', $pragma_file) or
	die "FATAL : cant_open_file_for_reading : $pragma_file\n";
    print (<$PG>);
    close $PG;
}

print "# $command_line\n";
print "# " . `date` . "\n";

my %genes;
my %duplicates;
while (<$IN>) {
    chomp;
    my ($alignID, $bin, $cdsEnd, $cdsEndStat, $cdsStart,
	$cdsStartStat, $chrom, $exonCount, $exonEnds, $exonFrames,
	$exonStarts, $name, $name2, $proteinID, $score, $strand,
	$txEnd, $txStart);

    if ($table eq 'knownGene') {
	($name, $chrom, $strand, $txStart, $txEnd, $cdsStart, $cdsEnd,
	 $exonCount, $exonStarts, $exonEnds, $proteinID, $alignID) =
	 split /\t/, $_;
    }
    elsif ($table =~ /^(refGene|ccdsGene|Gencode|vegaGene|ensGene)$/) {
	($bin, $name, $chrom, $strand, $txStart, $txEnd, $cdsStart,
	$cdsEnd, $exonCount, $exonStarts, $exonEnds, $score, $name2,
	$cdsStartStat, $cdsEndStat, $exonFrames) = split /\t/, $_;
    }
    else {
	die "FATAL : invalid_format : $table\n";
    }

    $txStart++;
    $cdsStart++;

    warn  "WARN : invalid_strand : $name, $strand"    if $strand  !~ /\+|-/;
    die "FATAL : invalid_txStart : $name, $txStart" if $txStart !~ /^\d+$/;
    die "FATAL : invalid_txEnd : $name, $txEnd"     if $txEnd   !~ /^\d+$/;

    my $old_name = $name;
    if (exists $duplicates{$name}) {
	$name = $name . '_DUP_' . sprintf('%02s', $duplicates{$name});
	warn "WARN : duplicate_transcript_id : $old_name changed to $name";
    }
    $duplicates{$old_name}++;

    my $transcript = {feature_id => $name,
		      seqid      => $chrom,
		      source     => 'UCSC_' . $table,
		      type       => 'mRNA',
		      start      => $txStart,
		      end        => $txEnd,
		      score      => '.',
		      strand     => $strand,
		      phase      => '.',
		  };

    $transcript->{attributes}{ID} = [$name];
    $transcript->{attributes}{cdsStartStat} = [$cdsStartStat] if $cdsStartStat;
    $transcript->{attributes}{cdsEndStat}   = [$cdsEndStat]   if $cdsEndStat;

    my @external_aliases;
    @external_aliases = keys %{$ALIASES{$name}} if ref $ALIASES{$name} eq 'HASH';

    my @aliases = grep {$_ } ($name2, $proteinID, @external_aliases);
    $transcript->{attributes}{Alias} = \@aliases if scalar @aliases;

    if ($add_genes) {
	my $gene_name;
	if ($name2) {
	    $gene_name = $name2;
	}
	else {
	    warn "WARN : missing_gene_name : Using $name as gene name";
	    $gene_name = $name;
	}
	
	if (exists $genes{$gene_name}) {
	    if ($genes{$gene_name}{seqid} ne $chrom) {
		warn ("WARN : seqid_mismatch_on_gene_creation : For $gene_name; " .
		      "existing seqid = $genes{$gene_name}{seqid} and new " .
		      "seqid = $chrom");
	    }
	    if ($genes{$gene_name}{strand} ne $strand) {
		warn ("WARN : strand_mismatch_on_gene_creation : For $gene_name; " .
		      "existing strand = $genes{$gene_name}{strand} and new " .
		      "strand = $strand");
	    }
	    $genes{$gene_name}{start} = ($genes{$gene_name}{start} < $txStart ?
					 $genes{$gene_name}{start}            :
					 $txStart);
	    $genes{$gene_name}{end} = ($genes{$gene_name}{end} > $txEnd ?
				       $genes{$gene_name}{end}           :
				       $txEnd);
	}
	else {
	my $gene = {feature_id => $gene_name,
		    seqid      => $chrom,
		    source     => 'UCSC_' . $table,
		    type       => 'gene',
		    start      => $txStart,
		    end        => $txEnd,
		    score      => '.',
		    strand     => $strand,
		    phase      => '.'};

	$gene->{attributes}{ID} = [$gene_name];
	$genes{$gene_name} = $gene;
	}

	add_aliases($genes{$gene_name}, \@aliases);
	push @{$transcript->{attributes}{Parent}}, $gene_name;
    }

    my @exon_starts = split ',', $exonStarts;
    map {$_++} @exon_starts;
    my @exon_ends   = split ',', $exonEnds;

    warn "WARN : mis_matched_exon_start_ends : $name\n"
	if (scalar @exon_starts != scalar @exon_ends);

    my @exon_pairs;
    for my $i (0 .. scalar @exon_starts - 1) {
	my ($start, $end) = ($exon_starts[$i], $exon_ends[$i]);
	warn "WARN : negative_length_exon : $name, $start, $end\n" if $start > $end;
	warn "WARN : short_exon : $name, $start, $end\n"     if $end - $start <= 3;
	push @exon_pairs, [$start, $end];
    }

    warn "WARN : exons_overlap : $name\n" if any_overlaps(@exon_pairs);

    my @cds_pairs;
    for my $pair (@exon_pairs) {
	last if $cdsEnd - $cdsStart < 3; #Dont allow a CDS < 3nt long.
	my ($start, $end) = @{$pair};
	next if $end   < $cdsStart;
	last if $start > $cdsEnd;
	$start = $cdsStart if ($start < $cdsStart && $end > $cdsStart);
	$end   = $cdsEnd   if ($start < $cdsEnd && $end > $cdsEnd);
	push @cds_pairs, [$start, $end];
    }

    $transcript->{type} = 'ncRNA' unless scalar @cds_pairs;

    my $exons = build_child_features(parent	 => $transcript,
				     type	 => 'exon',
				     coordinates => \@exon_pairs,
				     fasta       => $fasta,
				     );
    my $CDSs = build_child_features(parent	 => $transcript,
				    type	 => 'CDS',
				    coordinates => \@cds_pairs,
				    fasta       => $fasta,
				    ) if scalar @cds_pairs;
    $CDSs ||= [];

    write_gff($transcript, @{$exons}, @{$CDSs});
}

for my $gene_name (keys %genes) {
    write_gff($genes{$gene_name});
}

#-----------------------------------------------------------------------------
#-------------------------------- SUBROUTINES --------------------------------
#-----------------------------------------------------------------------------

sub build_child_features {

    my %args = @_;

    my $parent = $args{parent};
    my $type   = $args{type};
    my $coords = $args{coordinates};
    my $fasta     = $args{fasta};

    my $parent_id = $parent->{feature_id};

    my @features;
    my $count = 1;
    for my $pair (@{$coords}) {
	my ($start, $end) = @{$pair};
	my %feature = %{$parent};
	my $id = join ':', ($parent_id, $type, sprintf('%02s', $count++));
	my $attributes = {ID            => [$id],
			  Parent        => [$parent_id],
			  };

	@feature{qw(type start end attributes)} =
	    ($type, $start, $end, $attributes);

	push @features, \%feature;
    }
    if ($type eq 'CDS') {
	my $stop_count = finish_CDS($parent, $fasta, \@features) if $type eq 'CDS';
	if ($clean && $stop_count && $stop_count > 1) {
	    push @{$parent->{attributes}{Note}},
	    "CDS was removed due to internal stop codons";
	    @features = ();
	}
    }
    return \@features;
}

#-----------------------------------------------------------------------------

sub finish_CDS {

    my ($parent, $fasta, $features) = @_;

    my @features = sort {$a->{start} <=> $b->{start}} @{$features};
    my $strand = $parent->{strand};

    my $phase = 0;
    my $sequence;
    for my $feature (@features) {
	$feature->{phase} = $phase;
	my ($seqid, $start, $end) = @{$feature}{qw(seqid start end)};
	my $length = $end - $start + 1;
	my $CDS_sequence = $fasta->seq($seqid, $start, $end);
	$sequence .= $CDS_sequence if $CDS_sequence;
	$feature->{seq} = $CDS_sequence;
	my $adj_length = $length - $phase;
	my $mod = $length % 3;
	$phase = ($mod == 0 ? 0 :
		  $mod == 1 ? 2 :
		  $mod == 2 ? 1 :
		  -1);
	die ("FATAL : invalid_phase : $phase in " .
	     $feature->{feature_id}) if $phase < 0;
    }
    return if ! $sequence;
    if ($strand eq '-') {
	$sequence = revcomp($sequence);
    }
    my $protein = translate($sequence);
    $protein =~ s/\*$//;
    my $stop_count = $protein =~ tr/\*/\*/;
    if ($stop_count) {
	my $parent_id = $parent->{feature_id};
	$parent->{attributes}{Note} = ["$parent_id has $stop_count internal stop codons"];
	warn "WARN : stop_interupted_CDS : $parent_id has $stop_count internal stop codons\n";
	$protein =~ s/(.)/  $1/g;
	# print STDERR ">$sequence\n>$protein\n";
	# print STDERR Dumper($parent, @features);
	return $stop_count;
    }
    return undef;
}

#-----------------------------------------------------------------------------

sub revcomp {

    my ($sequence) = @_;

    my $revcomp_seq = reverse $sequence;
  $revcomp_seq =~ tr/acgtrymkswhbvdnxACGTRYMKSWHBVDNX/tgcayrkmswdvbhnxTGCAYRKMSWDVBHNX/;
    return $revcomp_seq;
}


#-----------------------------------------------------------------------------

sub write_gff {

    my @features = @_;

    for my $feature (sort {$a->{start} <=> $b->{start} ||
			   $b->{end}   <=> $a->{end}}  @features) {
	my $attribute_text = get_attribute_text($feature);
	print join "\t", (@{$feature}{qw(seqid source type start end score
					 strand phase)},
			  $attribute_text);
	print "\n";
	print '';
    }
}

#-----------------------------------------------------------------------------

sub get_attribute_text {

    my $feature = shift;
    my $attributes = $feature->{attributes};

    my %ORDER = (ID           => 1,
		 Parent       => 2,
		 Alias        => 3,
		 Note         => 4, 
		 cdsStartStat => 5,
		 cdsEndStat   => 6,
		 );

    my @pairs;
    for my $key (sort {($ORDER{$a} || 99) <=> ($ORDER{$b} || 99) || $a cmp $b}
		 keys %{$attributes}) {
	my @values = @{$attributes->{$key}};
	my $value_text = join ',', @values;
	push @pairs, join '=', ($key, $value_text);
    }
    my $attribute_text = join ';', @pairs;
    $attribute_text .= ';';

    return $attribute_text;
}

#-----------------------------------------------------------------------------

sub any_overlaps {

    my @pairs = @_;

    for my $i (0 .. scalar @pairs - 1) {
	my $pair_i = $pairs[$i];
	for my $j (0 .. scalar @pairs - 1) {
	    next if $i == $j;
	    my $pair_j = $pairs[$j];
	    # Return 1 unless these two don't overlap
	    return 1 unless ($pair_i->[1] < $pair_j->[0] or
			     $pair_i->[0] > $pair_j->[1]);
	}
    }
    # We never overlaped so return false
    return 0;
}

#-----------------------------------------------------------------------------

sub add_aliases {

    my ($gene, $aliases) = @_;

    my %unique;
    $gene->{attributes}{Alias} ||= [];
    my $feature_id = $gene->{feature_id};
    map {$unique{$_}++ unless $_ eq $feature_id} (@{$gene->{attributes}{Alias}}, @{$aliases});
    $gene->{attributes}{Alias} = [ sort keys %unique ];
    delete $gene->{attributes}{Alias}
       unless scalar @{$gene->{attributes}{Alias}};
    return;
}

#-----------------------------------------------------------------------------

sub translate {
    my ($sequence, $offset, $length) = @_;

    my $genetic_code = genetic_code();

    $offset ||= 0;
    $length ||= length($sequence);

    my $polypeptide;
    for (my $i = (0 + $offset); $i < $length; $i += 3) {
	my $codon = uc substr($sequence, $i, 3);
	if (! exists $genetic_code->{$codon}) {
	    warn "WARN : invalid_codon : $codon\n";
	    next;
	}
	my $aa = $genetic_code->{$codon};
	$polypeptide .= $aa;
    }
    return $polypeptide;
}

#-----------------------------------------------------------------------------    
sub genetic_code {
    my $self = shift;

    return {AAA => 'K',
          AAC => 'N',
          AAG => 'K',
          AAT => 'N',
          ACA => 'T',
          ACC => 'T',
          ACG => 'T',
          ACT => 'T',
          AGA => 'R',
          AGC => 'S',
          AGG => 'R',
          AGT => 'S',
          ATA => 'I',
          ATC => 'I',
          ATG => 'M',
          ATT => 'I',
          CAA => 'Q',
          CAC => 'H',
          CAG => 'Q',
          CAT => 'H',
          CCA => 'P',
          CCC => 'P',
          CCG => 'P',
          CCT => 'P',
          CGA => 'R',
          CGC => 'R',
          CGG => 'R',
          CGT => 'R',
          CTA => 'L',
          CTC => 'L',
          CTG => 'L',
          CTT => 'L',
          GAA => 'E',
          GAC => 'D',
          GAG => 'E',
          GAT => 'D',
          GCA => 'A',
          GCC => 'A',
          GCG => 'A',
          GCT => 'A',
          GGA => 'G',
          GGC => 'G',
          GGG => 'G',
          GGT => 'G',
          GTA => 'V',
          GTC => 'V',
          GTG => 'V',
          GTT => 'V',
          TAA => '*',
          TAC => 'Y',
          TAG => '*',
          TAT => 'Y',
          TCA => 'S',
          TCC => 'S',
          TCG => 'S',
          TCT => 'S',
          TGA => '*',
          TGC => 'C',
          TGG => 'W',
          TGT => 'C',
          TTA => 'L',
          TTC => 'F',
          TTG => 'L',
          TTT => 'F',
	};
}

#-----------------------------------------------------------------------------    
