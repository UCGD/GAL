#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;

use FindBin;
use lib "$FindBin::RealBin/../lib";

use GAL::Annotation;

$| = 1;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

gal_remove_transcripts --exclude_ids trns_exclude_ids_remove.txt feature.gff3

Description:

This script will remove a set of transcripts from a GFF3 dataset based
on a input list of IDs.

Options:

  --exclude_ids, -i

    A text file with a list of transcript IDs to remove.  One ID per
    line.

  --type, -t

    Require a particular type of transcript.  This can be a comma
    separated list.
";

my ($help, $exclude_ids, $type);

my $opt_success = GetOptions('help|h'   => \$help,
			     'exclude_ids|i=s'  => \$exclude_ids,
			     'type|t=s' => \$type);

die $usage unless $opt_success;
if ($help  || !@ARGV) {
  print $usage;
  exit(0);
}

$type ||= '';

my %types;
map {$types{$_}++} split /,/, $type;

my ($gff3_file) = @ARGV;

die "$usage\n\nFATAL : missing_gff3_file : GFF3 file required\n" unless $gff3_file;

my $annotation = GAL::Annotation->new($gff3_file);

my $features = $annotation->features;

my @exclude_ids;
if (-r $exclude_ids) {
  open(my $IN, '<', $exclude_ids) or die "FATAL : cant_open_id_file : $exclude_ids\n";
  @exclude_ids = (<$IN>);
}
else {
  @exclude_ids = split /,/, $exclude_ids;
}
chomp @exclude_ids;
my %exclude_ids = map {$_ => 1} @exclude_ids;

if ($gff3_file =~ /\.gff3$/) {
  my $meta_data = `grep -P '^\#' $gff3_file`;
  chomp $meta_data;
  print $meta_data;
  print "\n";
}

# Do the search and get an interator for all matching features
my $genes = $features->search({type => 'gene'});

my $id_count = scalar @exclude_ids;
print "# Transcripts whose IDs were found in the ID file $exclude_ids ($id_count total IDs) were removed by GAL/bin/examples/gal_remove_transcripts " . `date`;

my $skip_count;
# Iterate over the genes;
GENE:
while (my $gene = $genes->next) {
  my @transcripts = $gene->transcripts;
  my @keep;
  while (my $transcript = shift @transcripts) {
    if (exists $exclude_ids{$transcript->feature_id}) {
      $annotation->info('skipping_transcript_on_id', $transcript->feature_id);
      $skip_count++;
    }
    elsif ($type && ! $types{$transcript->type}) {
      $annotation->info('skipping_transcript_on_type',
			join(" ", $transcript->feature_id,
			     $transcript->type));
      $skip_count++;
    }
    else {
      push @keep, $transcript;
    }
  }
  if (! scalar @keep) {
      $annotation->info('skipping_gene_no_remaining_transcripts', $gene->feature_id);
      next GENE;
  }
  print $gene->to_gff3;
  print "\n";
  for my $transcript (@keep) {
    my @lines = $transcript->to_gff3_recursive;
    print join "\n", @lines;
    print "\n";
  }
}
$annotation->info('total_transcript_skipped', $skip_count);
