#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use Bio::DB::Fasta;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------
my $usage = "

Synopsis:

omicia_omim2gvf --fasta /path/to/ref/fasta/ omim_variants_v1.gff

Description:

Converts the file omim_variants_v1.gff from Omicia (Fidel Salas) to GVF.


Options:

  --gvf_version  The GVF version that the file conforms to [1.02]
  --file_version The version of the file. [1.00]
  --file_date    The date in ISO YYYY-MM-DD the file was created [Today]
  --fasta        The path to fasta file for the reference sequence.

";


my ($help, $gvf_version, $file_version, $file_date, $fasta);
my $opt_success = GetOptions('help'           => \$help,
			     'gvf_version=s'  => \$gvf_version,
			     'file_version=s' => \$file_version,
			     'file_date=s'    => \$file_date,
			     'fasta=s'        => \$fasta,
			    );

if (! $opt_success) {
    print STDERR join ' : ', ('FATAL',
                              'command_line_parse_error',
                              'Use gff_tool --help to see correct usage');
}

if ($help || !@ARGV) {
 print $usage;
 exit(0);
}

$gvf_version  ||= '1.02';
$file_version ||= '1.00';
$file_date    ||= '';

my $file = shift;
die $usage unless $file;
open (my $IN, '<', $file) or die "Can't open $file for reading\n$!\n";

my $fasta_db = Bio::DB::Fasta->new($fasta);

print "##gff-version 3\n";
print "##gvf-version $gvf_version\n";
print "##file-version $file_version\n";
print "##file-date $file_date\n\n";
print "# This file contains OMIM data converted to GVF\n";
print "# The data was converted from the file omim_variants_v1.gff\n";
print "# obtained from Fidel Salas (fsalas\@omicia.com).\n";
print "# Conversion by omicia_omim2gvf (barry.moore\@genetics.utah.edu\n\n";
 LINE:
    while (my $line = <$IN>) {

	# CM920001        HGMD    SNP     chr12:9123618   chr12:9123618   0       -       0       /codon=(seq="TAT", aa:Tyr); /dbxref="OMIM:103950:0002"
	# CM980001        HGMD    SNP     chr12:9123535   chr12:9123535   0       -       0       /codon=(seq="GTC", aa:Val); /dbxref="OMIM:103950:0001"
	# 28940571        dbSNP   SNP     chr22:41419150  chr22:41419150  0       -       0       /codon=(seq="CTG", aa:Leu); /dbxref="OMIM:607922:0002"
	# 28940572        dbSNP   SNP     chr22:41419342  chr22:41419342  0       -       0       /codon=(seq="GAC", aa:Asp); /dbxref="OMIM:607922:0004"

	my ($dbxref, $source, $type, $start, $end, $score, $strand, $phase,
	    $att_text) = split /\t/, $line;

	# Modify values as necessary
	my ($seqid) = $start =~ /(chr\d+):/;
	$start =~ s/(chr\d+)://;
	$end   =~ s/(chr\d+)://;
	my @dbxrefs;
	if ($type eq 'dbSNP') {
	    push @dbxrefs, 'dbSNP:rs' . $dbxref;
	}
	elsif ($type eq 'HGMD') {
	    push @dbxrefs, 'HGMD:' . $dbxref;
	}
	elsif ($type eq 'OMIM') {
	    # Don't know what this value is - we'll skip it for now.
	    # push @dbxrefs,  
	}

	$score = '.';
	$phase = '.';

	# Get reference sequence
	# Get all possible codons spanning this location
	my $reference_seq  = $fasta_db->seq($seqid, $start, $start);
	my $codons_seq = $fasta_db->seq($seqid, $start - 2, $start + 2);
	$codons_seq = revcomp($codons_seq) if $strand eq '-';
	my %nt_offsets = (substr($codons_seq, 0, 3) => 2,
			  substr($codons_seq, 1, 3) => 1,
			  substr($codons_seq, 2, 3) => 0,
			  );

	my $attributes = parse_attributes($att_text, $reference_seq,
					  \%nt_offsets);

	if (! defined $attributes) {
	    warn "Warning : bad_attributes : $line\n";
	    next LINE;
	}

	$attributes->{Dbxref} = \@dbxrefs if scalar \@dbxrefs;

	my %feature = (seqid	  => $seqid,
		       source	  => $source,
		       type	  => $type,
		       start	  => $start,
		       end	  => $end,
		       score	  => $score,
		       strand	  => $strand,
		       phase	  => $phase,
		       attributes => $attributes,
		       );

	my $gvf_string = feature2gvf(\%feature);
	print $gvf_string . "\n";
    }

#-----------------------------------------------------------------------------
#-------------------------------- SUBROUTINES --------------------------------
#-----------------------------------------------------------------------------

sub parse_attributes {

    my ($att_text, $reference_seq, $nt_offsets) = @_;

    my $genetic_code = get_genetic_code();

    # CM004784        HGMD    SNP     chr22:41419354  chr22:41419354  0       -       0       /codon=(seq="AAG", aa:Lys); /dbxref="OMIM:607922:0001"
    # CM004785        HGMD    SNP     chr22:41419342  chr22:41419342  0       -       0       /codon=(seq="GAC", aa:Asp); /dbxref="OMIM:607922:0004"
    # CM004786        HGMD    SNP     chr22:41419150  chr22:41419150  0       -       0       /codon=(seq="CTG", aa:Leu); /dbxref="OMIM:607922:0002"
    # CM004787        HGMD    SNP     chr22:41419119  chr22:41419119  0       -       0       /codon=(seq="TGA", aa:Term); /dbxref="OMIM:607922:0003"

    my %attributes = (Reference_seq => [$reference_seq]);
    my @pairs = split /\s*;\s*/, $att_text;
    my ($codon, $amino_acid, $id);
  PAIR:
    for my $pair (@pairs) {
	my ($tag, @values) = split /\s*=\s*/, $pair;
	$tag =~ s/\///g;
	my $value_text = join '', @values;
	#$value_text =~ s/\///g;
	$value_text =~ s/\"//g;
	$value_text =~ s/\(|\)//g;
	$value_text =~ s/\s+//g;
	if ($tag eq 'codon') {
	    my ($variant_codon, $variant_aa) = split /,/, $value_text;
	    $variant_codon =~ s/seq//;
	    $variant_aa =~ s/aa://;
	    my $nt_offset = $nt_offsets->{$variant_codon};
	    if (! defined $nt_offset) {
		warn "Warning : codon_not_found_on_reference : $att_text\n";
		return undef;
	    }
	    my $variant_seq = substr($codon, $nt_offset, 1);
	    my $reference_codon = $codon;
	    substr($reference_codon, $nt_offset, 1, $reference_seq);
	    my $reference_aa = $genetic_code->{$reference_codon};
	    my $check_variant_aa = $genetic_code->{$variant_codon};
	    if ($variant_aa ne $check_variant_aa) {
		warn "Warning : incorrect variant : $att_text\n";
		return undef;
	    }
	    my $variant_effect = $reference_aa ne $variant_aa ?
		'non_synonymous_codon' : 'synonymous_codon';
	    $variant_effect .= ' 0 ';
	    $attributes{Variant_seq} = [$variant_seq];
	    $attributes{Variant_effect} = [$variant_seq];

	    # Find the correct codon and infer the Variant sequence
	    # Create Reference_seq, Variant_seq, Variant_effect and Nomenclature tags
	}
	elsif ($tag eq 'dbxref') {
	    ($id = $value_text) =~ s/dbxref=//;
	    $attributes{'ID'} = [$id];
	    next PAIR;
	}
	else {
	    warn "Warning : unknown_attribute_tag : $tag\n";
	    next PAIR;
	}
    }
}

#-----------------------------------------------------------------------------

sub feature2gvf {

  my $feature = shift;

  my $att_string = attributes2gvf($feature->{attributes});
  my $gvf_string = join "\t", @{$feature}{qw(seqid source type start end
					     score strand phase att_string)
					};
  return $gvf_string;
}

#-----------------------------------------------------------------------------

sub get_genetic_code {



}

#-----------------------------------------------------------------------------

sub revcomp {

    my $seq = shift;
    $seq =~ tr/ATGCatgc/TACGtacg/;
    $seq = reverse $seq;
    return $seq;
}
