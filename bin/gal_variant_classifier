#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;

use FindBin;
use lib "$FindBin::RealBin/../lib";

use GAL::Annotation;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

gal_variant_classifier --fasta path/to/fasta --features feature.gff3 \
		   --variants variant.gff3

Description:

This script will take a genome annotation file, a variant file and classify
the functional effects of the variants against mRNA annotations.

Options:

  --fasta, -a genome.fa

      A path to the fasta files associated with the give features
      (Required).

  --features, -f genes.gff3

      The GFF3 file (or database) for the gene models (Required).

  --variants, -v variants.gvf

      The database name for the variants (Required).

  --chr, -c chr1

      Limit the analysis to a chromosome.

";

my ($help, $fasta_file, $gff_file, $gvf_file, $limit_chr);

my $opt_success = GetOptions('help'          => \$help,
			     'fasta=s'       => \$fasta_file,
			     'features=s'    => \$gff_file,
			     'variants=s'    => \$gvf_file,
			     'chr=s'         => \$limit_chr,
			      );

if (! $opt_success) {
    print STDERR join ' : ', ('FATAL',
                              'command_line_parse_error',
                              'Use gff_variant_clasifier --help to see correct usage');
}

if ($help || !@ARGV) {
 print $usage;
 exit(0);
}

die "$usage\n\nFATAL : missing_fasta_file : Fasta file required\n" unless $fasta_file;
die "$usage\n\nFATAL : missing_gff3_file : GFF3 file required\n"   unless $gff_file;
die "$usage\n\nFATAL : missing_gvf_file : GVF file required\n"     unless $gvf_file;

my $gff_anno = GAL::Annotation->new($gff_file,
				    $fasta_file);

my $features = $gff_anno->features;

my $gvf_anno = GAL::Annotation->new($gvf_file,
				    $fasta_file);

my $variants = $gvf_anno->features;

# Define the search
my %feature_where = (type => 'mRNA');
$feature_where{seqid} = $limit_chr if ($limit_chr);

# Do the search and get an interator for all matching features
my $mrnas = $features->search(\%feature_where);

# Iterate over the features
while (my $mrna = $mrnas->next) {
    # Get the feature ID
    my $mrna_id = $mrna->feature_id;
    # Get all the CDSs for this mRNA
    my $CDSs = $mrna->CDSs;
    # Iterate over each CDS
    while (my $CDS = $CDSs->next) {
	# Calculate which genomic bins this feature overlaps
	my $bins = $CDS->get_feature_bins;
	# Get my start and end
	my $cds_start = $CDS->start;
	my $cds_end   = $CDS->end;
	# Set up a new set of search criteria for overlapping variants
	# The addition of a bin column in the table makes range queries
	# much faster
	my %where = (bin   => {'-in' => $bins},
		     start => {'>='  => $cds_start},
		     end   => {'<='  => $cds_end},
		     );
	# Search for the overlapping variants
	my $these_variants = $variants->search(\%where);

	# Iterate over each variant
	while (my $variant = $these_variants->next) {
	    # Get data about the variant.
	    my $variant_id = $variant->feature_id;
	    my $seqid = $variant->seqid;
	    my $type  = $variant->type;
	    my $var_start = $variant->start;
	    my $reference_seq = $variant->reference_seq;
	    my @variant_seqs  = $variant->variant_seq_no_ref;

	    for my $variant_seq (@variant_seqs) {
		my $mrna_variant_seq = $variant_seq;
		# Some utility methods have to call the annotation object first.
		$mrna_variant_seq = $mrna->annotation->revcomp($variant_seq)
		    if $mrna->strand eq '-';
		# The various features have various useful methods according
		# to their type.
		my ($ref_codon, $offset) = $mrna->codon_at_location($var_start);
		unless ($ref_codon) {
		    warn "WARN : invalid_codon_lookup : $variant_id\n";
		    next;
		}
		# Another utility method that is supplied by the annotation object.
		my $ref_aa = $mrna->annotation->translate($ref_codon);
		my $var_codon = $ref_codon;
		substr($var_codon, $offset, 1, $mrna_variant_seq);
		my $var_aa = $mrna->annotation->translate($var_codon);
		my $effect;
		if ($ref_aa eq $var_aa) {
		    $effect = 'synonymous_codon';
		}
		elsif ($ref_aa eq '*') {
		    $effect = 'stop_lost';
		}
		elsif ($var_aa eq '*') {
		    $effect = 'stop_gained';
		}
		else {
		    $effect = 'non_synonymous_codon';
		}
		print join "\t", ($seqid,
				  $var_start,
				  $mrna_id,
				  $variant_id,
				  $reference_seq,
				  $variant_seq,
				  $ref_codon,
				  $var_codon,
				  $ref_aa,
				  $var_aa,
				  $effect,
				  );
		print "\n";
		print '';
	    }
	}
    }
}
