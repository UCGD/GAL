#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use Set::IntSpan::Fast;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------
my $usage = "

Synopsis:

feature_overlaps file1.gff file2.gff

Description:

Calculate various feature overlap statistics from a set of gff files.

Options:

  --pad 1000

    Pad the features by the given amount in each direction.

";


my ($help, $pad);
my $opt_success = GetOptions('help'    => \$help,
			     'pad=i'   => \$pad,
			      );

if (! $opt_success) {
    print STDERR join ' : ', ('FATAL',
                              'command_line_parse_error',
                              'Use gal_feature_overlaps --help to see correct usage');
}

if ($help || !@ARGV) {
 print $usage;
 exit(0);
}

my @files = @ARGV ;

die $usage if grep {! -r $_} @files;

my %file_sets;
my %merged_set;
for my $file (@files) {
    open (my $IN, '<', $file) or die "Can't open $file for reading\n$!\n";
    my %file_set;
    while (<$IN>) {
	next if /^(\#|\s)/;
	last if /^\#\#FASTA/;
	my ($seqid, $source, $type, $start, $end) = split /\t/, $_;
	$file_set{$seqid} ||= Set::IntSpan::Fast->new();
	$file_set{$seqid}->add_range($start, $end);
	if ($pad) {
	    $start -= $pad;
	    $start =  $start < 0 ? 0 : $start;
	    $end   += $pad;
	}
	$merged_set{$seqid} ||= Set::IntSpan::Fast->new();
	$merged_set{$seqid}->add_range($start, $end);
    }
    $file_sets{$file} = \%file_set;
}

my %data;
for my $seqid (sort keys %merged_set) {
    my $iterator = $merged_set{$seqid}->iterate_runs();
    while (my ( $start, $end ) = $iterator->()) {
	my $locus = join ':', ($seqid, $start, $end);
	for my $file (sort keys %file_sets) {
	    my $set = $file_sets{$file}{$seqid};
	    next unless $set;
	    if ($set->contains_any($start .. $end)) {
		push @{$data{$locus}}, $file;
	    }
	}
    }
}

for my $locus (sort keys %data) {
    my $count = scalar @{$data{$locus}};
    my $list = join ',', @{$data{$locus}};
    print join "\t", $locus, $count, $list;
    print "\n";
}

#-----------------------------------------------------------------------------
#-------------------------------- SUBROUTINES --------------------------------
#-----------------------------------------------------------------------------

